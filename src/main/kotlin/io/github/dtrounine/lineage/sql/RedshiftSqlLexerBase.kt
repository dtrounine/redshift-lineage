/**
 * MIT License with Commons Clause v1.0
 *
 * Copyright © 2025 Dmitrii Trunin (dtrounine@gmail.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the “Software”), to deal
 * in the Software **without** restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished
 * to do so, **subject to** the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be included
 *    in all copies or substantial portions of the Software.
 *
 * 2. **Commons Clause License Condition v1.0**
 *    Without limiting other conditions in the MIT License, the grant of rights
 *    under the License will **not** include, and the License does not grant to you,
 *    the right to **Sell** the Software.
 *
 *    For purposes of this condition, **“Sell”** means practicing any or all of
 *    the rights granted to you under the MIT License to provide to third parties,
 *    for a fee or other consideration, a product or service whose value derives,
 *    entirely or substantially, from the functionality of the Software.
 *
 *    **This includes any service or software which, at any extent, provides**
 *    - data-lineage functionality, or
 *    - SQL-code-analysis functionality.
 *
 *    Any license notice or attribution required by the MIT License must also
 *    include this Commons Clause License Condition notice.
 *
 * 3. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *    THE SOFTWARE.
 */
package io.github.dtrounine.lineage.sql

import io.github.dtrounine.lineage.sql.parser.generated.RedshiftSqlLexer
import org.antlr.v4.kotlinruntime.CharStream
import org.antlr.v4.kotlinruntime.Lexer
import java.util.*

abstract class RedshiftSqlLexerBase(inputStream: CharStream): Lexer(inputStream) {
    // This is a placeholder for the actual lexer implementation
    // The actual lexer would be generated by ANTLR based on the grammar file
    // and would contain the logic for tokenizing the SQL input.

    protected val tags: Stack<String> = Stack()

    fun PushTag() {
        tags.push(text)
    }

    fun IsTag(): Boolean {
        return text == tags.peek()
    }

    fun PopTag() {
        tags.pop()
    }

    fun UnterminatedBlockCommentDebugAssert() {
        //Debug.Assert(InputStream.LA(1) == -1 /*EOF*/);
    }

    fun CheckLaMinus(): Boolean {
        return inputStream.LA(1).toChar() != '-'
    }

    fun CheckLaStar(): Boolean {
        return inputStream.LA(1).toChar() != '*'
    }

    fun CharIsLetter(): Boolean {
        return Character.isLetter(inputStream.LA(-1))
    }

    fun HandleNumericFail() {
        inputStream.seek(inputStream.index() - 2)
        type = RedshiftSqlLexer.Tokens.Integral
    }

    fun HandleLessLessGreaterGreater() {
        if (text == "<<") type = RedshiftSqlLexer.Tokens.LESS_LESS
        if (text == ">>") type = RedshiftSqlLexer.Tokens.GREATER_GREATER
    }

    fun CheckIfUtf32Letter(): Boolean {
        var codePoint: Int = inputStream.LA(-2) shl 8 + inputStream.LA(-1)
        val c: CharArray
        if (codePoint < 0x10000) {
            c = charArrayOf(codePoint.toChar())
        } else {
            codePoint -= 0x10000
            c = charArrayOf((codePoint / 0x400 + 0xd800).toChar(), (codePoint % 0x400 + 0xdc00).toChar())
        }
        return Character.isLetter(c[0])
    }

    fun IsSemiColon(): Boolean {
        return ';' == inputStream.LA(1).toChar()
    }


}